datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/typegql-generated"
}

enum OauthConnectionService {
  github
  google
  discord
  twitter
}

enum AttachmentType {
 jpeg
 gif
 png
 svg
 pdf
 mp4
}

enum BugReportSeverity {
  catastrophic
  critical
  high
  medium
  low
}

model OauthConnection {
  id                 String                 @id @default(uuid())
  oauthService       OauthConnectionService
  email              String
  username           String
  oauthServiceUserId String
  isPrimary          Boolean

  // Connection Owner
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String   @id @default(uuid())
  username String   @unique
  email    String   @unique
  joinDate DateTime @default(now())
  hydra    Int

  // Profile
  profile   UserProfile @relation("UserProfileRelation", fields: [profileId], references: [id])
  profileId String

  // Projects
  ownedProjects Project[]
  allProjects   ProjectMember[]

  // Appreciated Projects
  likedProjects    Project[] @relation("UserLikedProjectsRelation")
  followedProjects Project[] @relation("UserFollowedProjectsRelation")

  // Oauth Connections
  oauthConnections OauthConnection[]

  // followers
  following User[] @relation("UserFollowRelation", references: [id])
  followers User[] @relation("UserFollowRelation", references: [id])

  // Posts and Post Groups
  posts               Post[]
  createdPostComments PostComment[]
  createdHashtags     Hashtag[]
  ownedPostGroups     PostGroup[]   @relation("UserOwnedPostGroupsRelation")
  memberOfPostGroups  PostGroup[]   @relation("PostGroupMembersRelation")

  // Bug reports and feature requests
  bugReports      BugReport[]
  featureRequests FeatureRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id        String @id @default(uuid())
  user      User?  @relation("UserProfileRelation")
  avatarURL String
  bio       String
}

model ProjectMemberPermissions {
  id                            String   @id @default(uuid())
  canAccessFeatureRequests      Boolean?
  canAccessBugReports           Boolean?
  canManageUsers                Boolean?
  canManageRoles                Boolean?
  canManageTasks                Boolean?
  canCreateProjectAnnouncements Boolean?
  canModeratePosts              Boolean?
  canManageProjectGroups        Boolean?
  canGenerateProjectInvites     Boolean?
  canViewRoadmap                Boolean?
  canManageRoadmap              Boolean? // cant be turned on unless canViewRoadmap is on
  canScheduleRooms              Boolean?
  canManageFundraisers          Boolean?
  canManageThirdPartyApps       Boolean?
  canManageProjectSurveys       Boolean?
  canViewProjectInsights        Boolean?
  canViewDeveloperInsights      Boolean?
  canManageProjectWaitlists     Boolean?
  canManageTesterOutsourcing    Boolean?
  canWriteDeveloperReviews      Boolean?
  canViewLogs                   Boolean?

  projectRole   ProjectRole?
  projectMember ProjectMember?
}

model ProjectRole {
  id                   String          @id @default(uuid())
  title                String          @unique
  description          String
  linkedOpenEndedTasks Task[]
  assignedMembers      ProjectMember[]

  permissions   ProjectMemberPermissions @relation(fields: [permissionsId], references: [id])
  permissionsId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectMember {
  // explictly defines a many to many relation between Project and User
  id               String        @id @default(uuid())
  roles            ProjectRole[]
  awaitingApproval Boolean

  // Tasks
  assignedTasks   Task[] @relation("MemberAssignedTasksRelation")
  authoredTasks   Task[] @relation("MemberAuthoredTasksRelation")
  coAuthoredTasks Task[] @relation("MemberCoauthoredTasksRelation")

  // Permissions - compiled array of permissions based off of all role permissions
  overallPermissions         ProjectMemberPermissions? @relation(fields: [projectMemberPermissionsId], references: [id])
  projectMemberPermissionsId String?

  // forge many to many relation
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String @id @default(uuid())
  title       String
  description String
  logoUrl     String
  bannerUrl   String

  newJoineesRequireApproval Boolean @default(true)

  owner   User            @relation(fields: [ownerId], references: [id])
  ownerId String
  members ProjectMember[]

  likers    User[] @relation("UserLikedProjectsRelation", references: [id])
  followers User[] @relation("UserFollowedProjectsRelation", references: [id])

  // roles
  roles ProjectRole[]

  // post groups
  postGroups PostGroup[]

  // task-related fields
  taskBoards     TaskBoard[]
  taskCategories TaskCategory[]
  taskLocations  TaskLocation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskBoard {
  id          String @id @default(uuid())
  title       String
  description String

  tasks Task[]

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskCategory {
  id          String  @id @default(uuid())
  name        String
  description String?
  color       String

  linkedTasks Task[]

  // project
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskLocation {
  // task location specifies the directory for the task (e.g web, api, cli, bot, etc)
  id          String @id @default(uuid())
  name        String
  linkedTasks Task[]

  // project
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskChecklistItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  completed   Boolean?

  checklist   TaskChecklist? @relation(fields: [checklistId], references: [id])
  checklistId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskChecklist {
  id             String              @id @default(uuid())
  name           String?
  description    String?
  items          TaskChecklistItem[]
  completedItems Int
  totalItems     Int

  // task
  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model Task {
  id String @id @default(uuid())

  taskBoard   TaskBoard @relation(fields: [taskBoardId], references: [id])
  taskBoardId String

  name        String
  description String?
  deadline    DateTime?
  priority    Int?
  isCompleted Boolean
  isOpen      Boolean

  // checklist
  checklists              TaskChecklist[]
  taskCompletedPercentage Int // computed on a scale of 1 to 100 based on how many checklist items amongst all of the checklists have been completed 

  // authors
  author    ProjectMember   @relation("MemberAuthoredTasksRelation", fields: [authorId], references: [id])
  authorId  String
  coAuthors ProjectMember[] @relation("MemberCoauthoredTasksRelation")

  // open ended tasks - allows members to get recommendations for tasks to take up
  isOpenEndedTask               Boolean?
  acceptingTaskRequiresApproval Boolean? // only applicable if isOpenEndedTask is set to true
  rolesPermittedToAcceptTask    ProjectRole[] // only applicable if isOpenEndedTask is set to true

  // assignees
  assignees ProjectMember[] @relation("MemberAssignedTasksRelation")

  // linked bugs reports and feature requests
  linkedFeatureRequests FeatureRequest[]
  linkedBugReports      BugReport[]

  // linked tasks
  waitlistedByTasks Task[] @relation("WaitlistingTaskRelation") // tasks that are waitlisting this task
  waitlistingTasks  Task[] @relation("WaitlistingTaskRelation") // tasks that are waitlisted due to this task
  duplicatedByTasks Task[] @relation("DuplicatingTaskRelation") // tasks that are duplicates of this task
  duplicatingTasks  Task[] @relation("DuplicatingTaskRelation") // tasks that are duplicated due to this task

  // complexity allows the ability to quantify the weight of a task
  complexity Int

  // Linked pull requests or commits
  // TASK: replace with pr and commit id's once git integrations are implemented
  linkedPrUrls     String[]
  linkedCommitUrls String[]

  // descriptive tags
  taskCategories TaskCategory[]
  taskLocations  TaskLocation[]

  // attachements
  attachements Attachment[]

  // TASK: connect flights/features for this task to go under

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeatureRequest {
  id          String @id @default(uuid())
  name        String
  description String

  creator                  User    @relation(fields: [creatorId], references: [id])
  creatorId                String
  isCreatedByProjectMember Boolean @default(false) // if the user that created the feature request was a member of the project that the feature request was created in

  attachments Attachment[]

  // TASK: Add comments

  // If this feature request results in the generation of a new feature, link it
  featureGeneratedFromRequest String? // TASK: Replace with actual feature reference once built
  // If the creation of a new feature is not required, and merely tasks will do, link them
  linkedTasks                 Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BugReport {
  id          String            @id @default(uuid())
  name        String
  description String
  severity    BugReportSeverity

  creator                  User    @relation(fields: [creatorId], references: [id])
  creatorId                String
  isCreatedByProjectMember Boolean

  attachments Attachment[]

  // TASK: Add comments

  // linked tasks
  linkedTasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id            String         @id @default(uuid())
  attachmentURL String
  type          AttachmentType

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?

  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [id])
  featureRequestId String

  BugReport   BugReport @relation(fields: [bugReportId], references: [id])
  bugReportId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hashtag {
  id         String @id @default(uuid())
  name       String
  numOfPosts BigInt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostGroup {
  id          String  @id @default(uuid())
  title       String
  description String
  isCommunity Boolean

  creator   User   @relation("UserOwnedPostGroupsRelation", fields: [creatorId], references: [id])
  creatorId String

  members User[] @relation("PostGroupMembersRelation")

  posts Post[]

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id             String   @id @default(uuid())
  postedtime     DateTime
  title          String
  description    String
  isAnnouncement Boolean

  postGroups PostGroup[]

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  comments    PostComment[]
  attachments Attachment[]

  hashtags Hashtag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostComment {
  id   String @id @default(uuid())
  body String

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


